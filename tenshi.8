.\" SH section heading
.\" SS subsection heading
.\" LP paragraph
.\" IP indented paragraph
.\" TP hanging label
.TH "tenshi" 8 "9 Nov 2004" "version 0.3.2"
.SH NAME
tenshi - Log Monitoring and Reporting tool
.SH SYNOPSIS
.B tenshi 
.B [ -c 
.I configuration file
.B ]
.B [ -d ]
.B [ -f ]
.B [ -h ]
.B [ -p ]
.B [ -P ]

.SH DESCRIPTION
.LP

tenshi is a log monitoring program, designed to watch one or more log files for lines
matching user defined regular expressions and report on the matches. The regular
expressions are assigned to queues which have an alert interval and a list of
mail recipients.

Queues can be set to send a notification as soon as there is a log line assigned
to it, or to send periodic reports. 

Additionally, uninteresting fields in the log lines (such as PID numbers) can be
masked with the standard regular expression grouping operators ( ). This allows
cleaner and more readable reports. All reports are separated by hostname and all
messages are condensed when possible.

The program reads a configuration file 
.RI ( tenshi.conf ) 
and then forks a deamon for monitoring the specified log files.

.SH OPTIONS
.SS
.TP
.I -c configuration file
Read configuration from file. (default: /etc/tenshi/tenshi.conf)
.TP
.I -d
Enable debug messages. In this mode the main process remains in the foreground.
.TP
.I -f
Enable foreground mode. In this mode the main process operates normally but remains 
in the foreground, this is needed for some process supervisors.
.TP
.I -p
Enable profiling mode. In this mode the main process remains in the foreground
and expects log lines to be fed to standard in. When it receives an EOF it will
stop processing. No alerts will be sent in this mode, it is used soley for
measuring tenshi's line processing speed. For example:
time $(cat /var/log/messages|tenshi -p)
.TP
.I -P
Define the file containing the PID of the process, this overrides any 'pidfile' option 
present in the configuration file.

.SH CONFIGURATION FILE

.br
All directives are shown with the standard default value where applicable, if omitted the default 
value will be used.

.I STATIC OPTIONS

.br
These options will be read the first time tenshi reads its config file. They
cannot be changed by re-reading the config file. If you change one of these
options and HUP tenshi it will die. You have been warned.

.TP
.I set pidfile /var/run/tenshi.pid
The file containing the PID of the process, useful for start/stop
scripts.
.TP
.I set logfile <log file path>
A log file to monitor. This may be specified multiple times to watch more than
one log file. 
.TP
.I set tail /usr/bin/tail
Specify the location of the tail binary used for reading the log files.
.TP
.I set tailargs -q --follow=name --retry -n 0
Set the arguments used for the tail command, this value must be tuned against your current 'tail'
implementation. Default values are configured for standard GNU coreutils tail. The
.I --follow=name
and
.I --retry
flags should deal properly with log rotation, if missing on your implementation we suggest that you use
something like 'cp /dev/null logfile' as a safe way for clearing the log file upon rotation.
.TP
.I set fifo <fifo path>
Use a FIFO instead of a file. This overrides
.I set logfile
and
.I set tail
since we are not using a standard file. This option allows to use a syslog-ng
.I pipe()
destination (or any other syslog implementation that allows FIFO usage). Unlike
.I set logfile
this option can be specified only once. This option is meant to be used only when the installed 'tail' 
binary doesn't behave properly with FIFOs, please test your tail implementation
before using this. A suitable test is 'echo foo | tail -f', if this dies complaining of an illegal seek, 
you have a broken version of tail installed. GNU tail is broken in this way, most BSD tails will work.
.LP

.I DYNAMIC OPTIONS

.br
These options are set each time the config file is read. tenshi reads its config
file once on start-up and whenever it receives a HUP.

.TP
.I set sleep 5
The loop sleep time for the notification process. The value must be \<\= 60 seconds.
.TP
.I set limit <number of lines>
The maximum number of messages per hostname allowed in a report, any lines after
the maximum will be omitted and a warning included. If this option is omitted then no limit is applied.
.TP
.I set logprefix <regexp> 
All valid syslog messages are parsed by default, while non-syslog ones are discarded. This option allows
to define an additional valid prefix for watching other type of logs. If the regexp is matched then the
prefix is removed from the log and the first grouped string is used for the hostname field. This may be 
specified multiple times to watch many different non-syslog logs.
.TP
.I set mask ______
The mask for strings enclosed by the grouping operators ( ). See the
.I REGEXP DEFINITIONS
section. 'set mask' on its own will set the mask to an empty string.
.TP
.I set mailserver localhost
The mail server to be contacted for sending out reports.
.TP
.I set subject tenshi report
The subject of report emails, the queue name is always automatically appended.
.TP
.I set hidepid <on|off>
This option turns on automatic stripping of 'foo[1234]:' style PID strings from
the start of log lines i.e. 'foo[1234]:' becomes 'foo:'. This allows you to
write regexs without worrying about masking the PID. Bear in mind that any time
you change this option you will need to re-write your regex rules or they will
not work.
.LP

.I QUEUES OPTIONS
.br

.br
All messages are assigned to queues. Every queue is processed periodically
according to its notification interval. There are two default builtin queues, 
.I trash
to which unwanted messages can be assigned (think /dev/null) and
.I repeat
which is used for smart repeat messages handling, see
.I REGEXP DEFINITIONS
for details.
.br

All queues are automatically flushed before shutdown when a SIGTERM is received. Please see section
.I SIGNALS
for additional information.

The syntax is the following:
.TP
.I set queue <queue_name> <mail_from> <mail_to> <cron_spec> [<subject>]
.TP
.I <queue_name>
The queue name. Can be any alphanumeric character string except for the builtin queues name.
.TP
.I <mail_from>
The mail sender for reports related to the queue.
.TP
.I <mail_to>
The mail recipient(s) for reports related to the queue. Multiple address can be
specified, seperated by commas.
.TP
.I [<cron_spec>]
This is a five-field cron-style specification for when the reports should be
emailed. Ranges and skip values are supported as per the de facto crontab
syntax with a few exceptions. Please see
.I crontab
man page for crontab syntax explanation. The supported day names are: Mon, Tue,
Wed, Thu, Fri, Sat, Sun. Monday is 1, Sunday 0 or 7.  Supported month names
are: Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dev. Day and Month
names are not case sensitive.  Additionally, 'now' can be specified for
immediate notifications.
.TP
.I <subject>
This is the subject for to use for email reports regarding this queue. If this
isn't specified then the default subject will be used.

Examples:
.br
set queue report tenshi@localhost sysadmin@localhost [0 9-17 * * *]
.br
set queue report tenshi@localhost sysadmin@localhost [30 18 * * *]
.br
set queue report tenshi@localhost sysadmin@localhost [*/10 * * * *]
.br
set queue critical tenshi@localhost sysadmin@localhost,noc@localhost [now] CRITICAL WARNING - 
.LP

.I REGEXP DEFINITIONS
.br

.br
All valid syslog messages are matched against standard perl regexps, all regexps are defined with the
following syntax:
.TP
.I <queue_name> <regexp>
.LP

The regexps are evaluted in order so a matched message is not checked against the subsequent regexps. Keep
this in mind when assembling the configuration file. It's advisable to catch all messages by placing an all 
matching regexp at the end of the configuration file. It's also good for performance having trash rules not
logically connected with other matching rules at the beginning of the section.

.br
The standard grouping operators
.I ( )
can be used for string masking, literal "(" and ")" can be protected with the standard quotation operator 
"\\". There's a lot of documentation about regular expressions, a good start could be perl
.I perlre
and
.I perlretut
manual pages.
.br
You can also use the (?: ) operators to use groups with masking. This allows you
to match, for example, output from several programs in a similar format. There
is an example of this below (the sudo/su line).

.br
The builtin queue
.I repeat
can be used for special handling of "last message repreated x times" style log lines.
When the assigned regexps are matched the line count for the last line received from the same host is 
incremented by the first grouped string. Keep in mind that it is possible for syslog lines to be received 
from remote hosts out of order. If this happens you should not use this feature because tenshi will mis-report 
line counts.

.br
The builtin queue
.I group
can be used to group sets of regex together to speed up line matching.  If a
line fails to match a regex assigned to the group queue then tenshi will skip
all the regex up until the next group_end statement.  Nested groups are allowed.
An example of this is included below.

.br
The regexs below assume 
.I hidepid 
is turned on. If you have it turned off then you will need to add in \\[(.+)\\] to the
regex following the progam name to get them to work.
.br
For example:
mail ^sendmail: (.+): to=(.+),(.+)delay=(.+)
becomes:
mail ^sendmail\\[(.+)\\]: (.+): to=(.+),(.+)delay=(.+)

Examples:

.br
trash ^xinetd

.br
repeat ^(?:last message repeated|above message repeats) (\\d+) time

.br
group ^sendmail:
.br
mail ^sendmail: (.+): to=(.+),(.+)delay=(.+)
.br
mail ^sendmail: (.+): to=(.+),(.+)relay=(.+),(.+)stat=Sent
.br
group_end

.br
mail ^ipop3d: Login user=(.+)

.br
critical ^sshd: Illegal user

.br
root ^sshd\\(pam_unix\\): session opened for user root by root\\(uid=0\\)

.br
report ^sshd: Accepted rsa for (.+) from (.+) port (.+)

.br
trash ^sshd

.br
critical ^(?:sudo|su):

.br
critical ^Oops

.br
misc .*


.SH SIGNALS
.br
tenshi can handle different signals sent to the process, here's the list of supported ones:

.TP
.B TERM
flush all queues and then exit
.TP
.B INT
flush all queues and then exit
.TP
.B USR1
flush any queues which have reached their notification interval
.TP
.B USR2
force all queues to be flushed, even if they have not reached their
notification interval
.TP
.B HUP
force all queues to be flushed, even if they have not reached their
notification interval, re-read the config file and continue as
normal.
.LP
.I WARNING:
If you change a STATIC OPTION in the config file and send tenshi a HUP it will
die. You will need to restart tenshi for changes to STATIC OPTIONs to take
effect.

.SH EXAMPLES
See the included tenshi.conf.

.SH REQUIREMENTS

tenshi needs a working 'tail' implementation.
.br

It also requires Net::SMTP module for mailing reports which should be included
in your perl installation, otherwise you can grab it at http://www.cpan.org or 
using the CPAN shell (`perl -e shell -MCPAN`).

.SH BUGS

Please report any bugs you find to <tenshi@gentoo.org>.

.SH TODO
- custom reports layout
.br
- add other actions besides mail notifications
.br
- find/design a logo

Any volounteers ? ;)

.SH LICENSE
.B tenshi
is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

.SH DISTRIBUTION

The latest version of tenshi can be found at
.BI http://tenshi.gentoo.org

Copyright 2004 Andrea Barisani <lcars@gentoo.org> and Rob Holland <tigger@ereet.co.uk>

.SH NOTES

tenshi was formerly known as 
.I wasabi 
but the name was changed as we were informed that wasabi is a registered a trademark relating 
to another piece of software.

This tool is a replacement for
.I oak 
, you can find it at 
.BI http://www.ktools.org

.I Friedl, Jeffrey E. F. Mastering Regular Expressions, 2nd Edition. O'Reilly

.SH AUTHORS
tenshi was initially written by Andrea Barisani <lcars@gentoo.org>. It is now
maintained by Andrea Barisani <lcars@gentoo.org> and Rob Holland
<tigger@ereet.co.uk>
